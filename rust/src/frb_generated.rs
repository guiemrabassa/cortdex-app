// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.10.0.

#![allow(
    non_camel_case_types,
    unused,
    non_snake_case,
    clippy::needless_return,
    clippy::redundant_closure_call,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::unused_unit,
    clippy::double_parens,
    clippy::let_and_return,
    clippy::too_many_arguments,
    clippy::match_single_binding,
    clippy::clone_on_copy,
    clippy::let_unit_value,
    clippy::deref_addrof,
    clippy::explicit_auto_deref,
    clippy::borrow_deref_ref,
    clippy::needless_borrow
)]

// Section: imports

use crate::api::error::*;
use crate::api::IntoConcreteCortexCommand;
use crate::api::*;
use crate::inner::client::*;
use crate::inner::command::*;
use crate::inner::server::*;
use cortdex_db::api::git::*;
use cortdex_ml::manager::*;
use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate!(
    default_stream_sink_codec = SseCodec,
    default_rust_opaque = RustOpaqueMoi,
    default_rust_auto_opaque = RustAutoOpaqueMoi,
);
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str = "2.10.0";
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 = -1509993434;

// Section: executor

flutter_rust_bridge::frb_generated_default_handler!();

// Section: wire_funcs

fn wire__crate__api__CortdexClient_new_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "CortdexClient_new",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_kind = <crate::api::ConnectionSettings>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, CortdexError>(
                    (move || async move {
                        let output_ok = crate::api::CortdexClient::new(api_kind).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__CortdexClient_process_command_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "CortdexClient_process_command",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CortdexClient>,
            >>::sse_decode(&mut deserializer);
            let api_command = <ConcreteCortdexCommand>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, CortdexError>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = crate::api::CortdexClient::process_command(
                            &*api_that_guard,
                            api_command,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__error__CortdexError_get_message_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "CortdexError_get_message",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <CortdexError>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok =
                    Result::<_, ()>::Ok(crate::api::error::CortdexError::get_message(api_that))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__inner__client__CortdexLocalClient_change_model_manager_config_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "CortdexLocalClient_change_model_manager_config",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CortdexLocalClient>,
            >>::sse_decode(&mut deserializer);
            let api_new_config =
                <cortdex_ml::api::manager::ModelManagerConfig>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let mut api_that_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_that, 0, true,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),
                            _ => unreachable!(),
                        }
                    }
                    let mut api_that_guard = api_that_guard.unwrap();
                    let output_ok = Result::<_, ()>::Ok({
                        crate::inner::client::CortdexLocalClient::change_model_manager_config(
                            &mut *api_that_guard,
                            api_new_config,
                        );
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__inner__client__CortdexLocalClient_download_new_model_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "CortdexLocalClient_download_new_model",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CortdexLocalClient>,
            >>::sse_decode(&mut deserializer);
            let api_model_id = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, CortdexError>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, true,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref_mut().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let mut api_that_guard = api_that_guard.unwrap();
                        let output_ok =
                            crate::inner::client::CortdexLocalClient::download_new_model(
                                &mut *api_that_guard,
                                api_model_id,
                            )
                            .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__inner__client__CortdexLocalClient_get_all_models_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "CortdexLocalClient_get_all_models", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexLocalClientProxyEnum>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse::<_, CortdexError>((move || async move {
                        let mut api_that_guard = None;
let decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);
        for i in decode_indices_ {
            match i {
                0 => api_that_guard = Some(api_that.lockable_decode_async_ref().await),
                _ => unreachable!(),
            }
        }
        let api_that_guard = api_that_guard.unwrap();
 let output_ok = crate::inner::client::CortdexLocalClient::get_all_models(&*api_that_guard).await?;   Ok(output_ok)
                    })().await)
                } })
}
fn wire__crate__inner__client__CortdexLocalClient_get_model_manager_config_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "CortdexLocalClient_get_model_manager_config", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexLocalClientProxyEnum>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse::<_, CortdexError>((move ||  {
                        let mut api_that_guard = None;
let decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);
        for i in decode_indices_ {
            match i {
                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                _ => unreachable!(),
            }
        }
        let api_that_guard = api_that_guard.unwrap();
 let output_ok = crate::inner::client::CortdexLocalClient::get_model_manager_config(&*api_that_guard)?;   Ok(output_ok)
                    })())
                } })
}
fn wire__crate__inner__client__CortdexLocalClient_load_model_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "CortdexLocalClient_load_model",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CortdexLocalClient>,
            >>::sse_decode(&mut deserializer);
            let api_model_id = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, CortdexError>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, true,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref_mut().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let mut api_that_guard = api_that_guard.unwrap();
                        let output_ok = crate::inner::client::CortdexLocalClient::load_model(
                            &mut *api_that_guard,
                            api_model_id,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__inner__client__CortdexLocalClient_remove_model_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "CortdexLocalClient_remove_model",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CortdexLocalClient>,
            >>::sse_decode(&mut deserializer);
            let api_model_id = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, CortdexError>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, true,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref_mut().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let mut api_that_guard = api_that_guard.unwrap();
                        let output_ok = crate::inner::client::CortdexLocalClient::remove_model(
                            &mut *api_that_guard,
                            api_model_id,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__inner__client__CortdexRemoteClient_connect_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "CortdexRemoteClient_connect",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_ip = <String>::sse_decode(&mut deserializer);
            let api_port = <u16>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, CortdexError>(
                    (move || async move {
                        let output_ok =
                            crate::inner::client::CortdexRemoteClient::connect(api_ip, api_port)
                                .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__inner__server__CortdexServer_start_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "CortdexServer_start",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_settings = <crate::api::ServerSettings>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, CortdexError>(
                    (move || async move {
                        let output_ok =
                            crate::inner::server::CortdexServer::start(api_settings).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__inner__server__CortdexServer_stop_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "CortdexServer_stop",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CortdexServer>,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, true,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),
                                _ => unreachable!(),
                            }
                        }
                        let mut api_that_guard = api_that_guard.unwrap();
                        let output_ok =
                            crate::inner::server::CortdexServer::stop(&mut *api_that_guard)?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__cortdex_ml__manager__ModelManager_download_new_model_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ModelManager_download_new_model", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerModelManagerProxyEnum>::sse_decode(&mut deserializer);
let api_model_id = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>((move || async move {
                        let mut api_that_guard = None;
let decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);
        for i in decode_indices_ {
            match i {
                0 => api_that_guard = Some(api_that.lockable_decode_async_ref().await),
                _ => unreachable!(),
            }
        }
        let api_that_guard = api_that_guard.unwrap();
 let output_ok = cortdex_ml::manager::ModelManager::download_new_model(&*api_that_guard, api_model_id).await?;   Ok(output_ok)
                    })().await)
                } })
}
fn wire__cortdex_ml__manager__ModelManager_get_all_models_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ModelManager_get_all_models", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerModelManagerProxyEnum>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>((move || async move {
                        let mut api_that_guard = None;
let decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);
        for i in decode_indices_ {
            match i {
                0 => api_that_guard = Some(api_that.lockable_decode_async_ref().await),
                _ => unreachable!(),
            }
        }
        let api_that_guard = api_that_guard.unwrap();
 let output_ok = cortdex_ml::manager::ModelManager::get_all_models(&*api_that_guard).await?;   Ok(output_ok)
                    })().await)
                } })
}
fn wire__cortdex_ml__manager__ModelManager_remove_model_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ModelManager_remove_model", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerModelManagerProxyEnum>::sse_decode(&mut deserializer);
let api_model_id = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>((move || async move {
                        let mut api_that_guard = None;
let decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);
        for i in decode_indices_ {
            match i {
                0 => api_that_guard = Some(api_that.lockable_decode_async_ref().await),
                _ => unreachable!(),
            }
        }
        let api_that_guard = api_that_guard.unwrap();
 let output_ok = cortdex_ml::manager::ModelManager::remove_model(&*api_that_guard, api_model_id).await?;   Ok(output_ok)
                    })().await)
                } })
}
fn wire__cortdex_ml__manager__ModelManager_serialized_settings_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ModelManager_serialized_settings", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerModelManagerProxyEnum>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>((move ||  {
                        let mut api_that_guard = None;
let decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);
        for i in decode_indices_ {
            match i {
                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                _ => unreachable!(),
            }
        }
        let api_that_guard = api_that_guard.unwrap();
 let output_ok = cortdex_ml::manager::ModelManager::serialized_settings(&*api_that_guard)?;   Ok(output_ok)
                    })())
                } })
}
fn wire__cortdex_db__api__git__VaultManager_init_vault_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "VaultManager_init_vault",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<VaultManager>,
            >>::sse_decode(&mut deserializer);
            let api_name = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, true,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),
                                _ => unreachable!(),
                            }
                        }
                        let mut api_that_guard = api_that_guard.unwrap();
                        let output_ok = cortdex_db::api::git::VaultManager::init_vault(
                            &mut *api_that_guard,
                            api_name,
                        )?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__cortdex_db__api__git__VaultManager_list_all_vaults_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "VaultManager_list_all_vaults",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<VaultManager>,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let mut api_that_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_that, 0, false,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                            _ => unreachable!(),
                        }
                    }
                    let api_that_guard = api_that_guard.unwrap();
                    let output_ok = Result::<_, ()>::Ok(
                        cortdex_db::api::git::VaultManager::list_all_vaults(&*api_that_guard),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__cortdex_db__api__git__VaultManager_load_vault_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "VaultManager_load_vault",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<VaultManager>,
            >>::sse_decode(&mut deserializer);
            let api_name = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, true,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),
                                _ => unreachable!(),
                            }
                        }
                        let mut api_that_guard = api_that_guard.unwrap();
                        let output_ok = cortdex_db::api::git::VaultManager::load_vault(
                            &mut *api_that_guard,
                            api_name,
                        )?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__cortdex_db__api__git__VaultManager_start_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "VaultManager_start",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_main_dir = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(
                        cortdex_db::api::git::VaultManager::start(api_main_dir),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__cortdex_types__api__attribute__attribute_command_into_ccd_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "attribute_command_into_ccd",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that =
                <cortdex_types::api::attribute::AttributeCommand>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    cortdex_types::api::attribute::AttributeCommand::into_ccd(api_that),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__cortdex_types__api__attribute__attribute_kind_from_string_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "attribute_kind_from_string",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_string = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    cortdex_types::api::attribute::AttributeKind::from_string(api_string),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__cortdex_types__api__attribute__attribute_value_kind_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "attribute_value_kind",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that =
                <cortdex_types::api::attribute::AttributeValue>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(
                        cortdex_types::api::attribute::AttributeValue::kind(&api_that),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__create_log_stream_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "create_log_stream",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_sink = <StreamSink<
                crate::api::LogEntry,
                flutter_rust_bridge::for_generated::SseCodec,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let output_ok = crate::api::create_log_stream(api_sink)?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__init_app_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "init_app",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_main_dir = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let output_ok = crate::api::init_app(api_main_dir).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__cortdex_ml__api__manager__model_manager_config_new_basic_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "model_manager_config_new_basic",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_dir = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    cortdex_ml::api::manager::ModelManagerConfig::new_basic(api_dir),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__cortdex_types__api__note__note_command_into_ccd_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "note_command_into_ccd",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <cortdex_types::api::note::NoteCommand>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok =
                    Result::<_, ()>::Ok(cortdex_types::api::note::NoteCommand::into_ccd(api_that))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__cortdex_types__api__note__note_default_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "note_default",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(cortdex_types::api::note::Note::default())?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__cortdex_types__api__note__note_new_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "note_new",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_title = <String>::sse_decode(&mut deserializer);
            let api_content = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(cortdex_types::api::note::Note::new(
                    api_title,
                    api_content,
                ))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__cortdex_types__api__note__note_query_into_ccd_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "note_query_into_ccd",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <cortdex_types::api::note::NoteQuery>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok =
                    Result::<_, ()>::Ok(cortdex_types::api::note::NoteQuery::into_ccd(api_that))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__cortdex_types__api__note__note_with_path_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "note_with_path",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_title = <String>::sse_decode(&mut deserializer);
            let api_content = <String>::sse_decode(&mut deserializer);
            let api_path = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(cortdex_types::api::note::Note::with_path(
                    api_title,
                    api_content,
                    api_path,
                ))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__read_markdown_file_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "read_markdown_file",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_path = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, CortdexError>((move || {
                    let output_ok = crate::api::read_markdown_file(&api_path)?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__write_markdown_file_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "write_markdown_file",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_path = <String>::sse_decode(&mut deserializer);
            let api_content = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, CortdexError>((move || {
                    let output_ok = crate::api::write_markdown_file(&api_path, &api_content)?;
                    Ok(output_ok)
                })())
            }
        },
    )
}

// Section: static_checks

#[allow(clippy::unnecessary_literal_unwrap)]
const _: fn() = || {
    {
        let Attribute = None::<cortdex_types::api::attribute::Attribute>.unwrap();
        let _: String = Attribute.name;
        let _: cortdex_types::api::attribute::AttributeKind = Attribute.kind;
        let _: Option<std::collections::HashSet<String>> = Attribute.options;
    }
    match None::<cortdex_types::api::attribute::AttributeCommand>.unwrap() {
        cortdex_types::api::attribute::AttributeCommand::AddToNote {
            note_id,
            attribute_name,
            attribute_value,
        } => {
            let _: uuid::Uuid = note_id;
            let _: String = attribute_name;
            let _: cortdex_types::api::attribute::AttributeValue = attribute_value;
        }
        cortdex_types::api::attribute::AttributeCommand::AddToSelectable {
            attribute_name,
            new_selectable,
        } => {
            let _: String = attribute_name;
            let _: String = new_selectable;
        }
        cortdex_types::api::attribute::AttributeCommand::Create { def } => {
            let _: cortdex_types::api::attribute::Attribute = def;
        }
        cortdex_types::api::attribute::AttributeCommand::Get { name } => {
            let _: String = name;
        }
        cortdex_types::api::attribute::AttributeCommand::GetAllFromNote { note_id } => {
            let _: uuid::Uuid = note_id;
        }
        cortdex_types::api::attribute::AttributeCommand::GetAllFromSelectable {
            attribute_name,
        } => {
            let _: String = attribute_name;
        }
        cortdex_types::api::attribute::AttributeCommand::GetFromNote { note_id, name } => {
            let _: uuid::Uuid = note_id;
            let _: String = name;
        }
        cortdex_types::api::attribute::AttributeCommand::RemoveFromNote { note_id, name } => {
            let _: uuid::Uuid = note_id;
            let _: String = name;
        }
        cortdex_types::api::attribute::AttributeCommand::Search {
            amount,
            query,
            desc,
        } => {
            let _: usize = amount;
            let _: String = query;
            let _: bool = desc;
        }
        cortdex_types::api::attribute::AttributeCommand::UpdateValueOnNote {
            note_id,
            attribute_name,
            attribute_value,
        } => {
            let _: uuid::Uuid = note_id;
            let _: String = attribute_name;
            let _: cortdex_types::api::attribute::AttributeValue = attribute_value;
        }
    }
    match None::<cortdex_types::api::attribute::AttributeValue>.unwrap() {
        cortdex_types::api::attribute::AttributeValue::Object(field0) => {
            let _: uuid::Uuid = field0;
        }
        cortdex_types::api::attribute::AttributeValue::Text(field0) => {
            let _: String = field0;
        }
        cortdex_types::api::attribute::AttributeValue::Number(field0) => {
            let _: f64 = field0;
        }
        cortdex_types::api::attribute::AttributeValue::Select(field0) => {
            let _: String = field0;
        }
        cortdex_types::api::attribute::AttributeValue::MultiSelect(field0) => {
            let _: std::collections::HashSet<String> = field0;
        }
        cortdex_types::api::attribute::AttributeValue::Checkbox(field0) => {
            let _: bool = field0;
        }
        cortdex_types::api::attribute::AttributeValue::Datetime(field0) => {
            let _: chrono::NaiveDateTime = field0;
        }
        cortdex_types::api::attribute::AttributeValue::Date(field0) => {
            let _: chrono::NaiveDateTime = field0;
        }
        cortdex_types::api::attribute::AttributeValue::Time(field0) => {
            let _: chrono::NaiveDateTime = field0;
        }
    }
    {
        let AttributeWithValue = None::<cortdex_types::api::attribute::AttributeWithValue>.unwrap();
        let _: String = AttributeWithValue.name;
        let _: cortdex_types::api::attribute::AttributeKind = AttributeWithValue.kind;
        let _: Option<std::collections::HashSet<String>> = AttributeWithValue.options;
        let _: cortdex_types::api::attribute::AttributeValue = AttributeWithValue.value;
        let _: uuid::Uuid = AttributeWithValue.note_id;
    }
    match None::<cortdex_db::api::DbPath>.unwrap() {
        cortdex_db::api::DbPath::Local { path } => {
            let _: String = path;
        }
        cortdex_db::api::DbPath::Remote { address, port } => {
            let _: String = address;
            let _: u16 = port;
        }
    }
    {
        let ModelManagerConfig = None::<cortdex_ml::api::manager::ModelManagerConfig>.unwrap();
        let _: String = ModelManagerConfig.selected;
        let _: String = ModelManagerConfig.dir;
        let _: String = ModelManagerConfig.model_dir;
    }
    {
        let Note = None::<cortdex_types::api::note::Note>.unwrap();
        let _: uuid::Uuid = Note.id;
        let _: String = Note.title;
        let _: String = Note.content;
        let _: String = Note.path;
    }
    match None::<cortdex_types::api::note::NoteCommand>.unwrap() {
        cortdex_types::api::note::NoteCommand::ChangeTitle { id, new_title } => {
            let _: uuid::Uuid = id;
            let _: String = new_title;
        }
        cortdex_types::api::note::NoteCommand::ChangeContent { id, new_content } => {
            let _: uuid::Uuid = id;
            let _: String = new_content;
        }
        cortdex_types::api::note::NoteCommand::Create => {}
        cortdex_types::api::note::NoteCommand::Get { id } => {
            let _: uuid::Uuid = id;
        }
        cortdex_types::api::note::NoteCommand::Delete { id } => {
            let _: uuid::Uuid = id;
        }
    }
    match None::<cortdex_types::api::note::NoteQuery>.unwrap() {
        cortdex_types::api::note::NoteQuery::Basic { amount, text } => {
            let _: usize = amount;
            let _: String = text;
        }
        cortdex_types::api::note::NoteQuery::Full { amount, text } => {
            let _: usize = amount;
            let _: String = text;
        }
    }
};

// Section: related_funcs

flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConcreteCortdexCommand>
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CortdexClient>
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CortdexError>
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CortdexLocalClient>
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CortdexRemoteClient>
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CortdexServer>
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ModelManager>
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<VaultManager>
);

// Section: extra_from_parser

pub enum Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexLocalClientProxyEnum
{
    Variant0(RustAutoOpaque<CortdexClient>),
}

pub fn frb_internal_no_impl_dummy_function_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexLocalClientProxyEnum(
    a: Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexLocalClientProxyEnum,
) {
}

impl Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexLocalClientProxyEnum {
            pub fn blocking_read(&self) -> Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexLocalClientProxyEnumRwLockReadGuard {
                match self {
            Self::Variant0(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexLocalClientProxyEnumRwLockReadGuard::Variant0(inner.blocking_read()),

        }
            }

            pub fn blocking_write(&self) -> Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexLocalClientProxyEnumRwLockWriteGuard {
                unreachable!()
            }

            pub async fn read(&self) -> Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexLocalClientProxyEnumRwLockReadGuard {
                match self {
            Self::Variant0(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexLocalClientProxyEnumRwLockReadGuard::Variant0(inner.read().await),

        }
            }

            pub async fn write(&self) -> Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexLocalClientProxyEnumRwLockWriteGuard {
                unreachable!()
            }
        }

impl Lockable for Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexLocalClientProxyEnum {
            type RwLockReadGuard<'a> = Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexLocalClientProxyEnumRwLockReadGuard<'a>;
            type RwLockWriteGuard<'a> = Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexLocalClientProxyEnumRwLockWriteGuard<'a>;

            fn lockable_order(&self) -> flutter_rust_bridge::for_generated::LockableOrder {
                match self {
            Self::Variant0(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),

        }
            }

            fn lockable_decode_sync_ref(&self) -> Self::RwLockReadGuard<'_> {
                self.blocking_read()
            }

            fn lockable_decode_sync_ref_mut(&self) -> Self::RwLockWriteGuard<'_> {
                self.blocking_write()
            }

            fn lockable_decode_async_ref<'a>(
                &'a self,
            ) -> std::pin::Pin<Box<dyn std::future::Future<Output = Self::RwLockReadGuard<'a>> + Send + 'a>>
            where
                Self: Sync + 'a,
            {
                Box::pin(async move { self.read().await })
            }

            fn lockable_decode_async_ref_mut<'a>(
                &'a self,
            ) -> std::pin::Pin<Box<dyn std::future::Future<Output = Self::RwLockWriteGuard<'a>> + Send + 'a>>
            where
                Self: Sync + 'a,
            {
                Box::pin(async move { self.write().await })
            }
        }

pub enum Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexLocalClientProxyEnumRwLockReadGuard<
    'a,
> {
    Variant0(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, CortdexClient>),
}

impl std::ops::Deref for Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexLocalClientProxyEnumRwLockReadGuard<'_> {
            type Target = CortdexLocalClient;

            fn deref(&self) -> &Self::Target {
                match self {
            Self::Variant0(inner) => inner.deref().local(),

        }
            }
        }

pub enum Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexLocalClientProxyEnumRwLockWriteGuard<
    'a,
> {
    Variant0(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, CortdexClient>),
}

impl std::ops::Deref for Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexLocalClientProxyEnumRwLockWriteGuard<'_> {
            type Target = CortdexLocalClient;

            fn deref(&self) -> &Self::Target {
                match self {
            Self::Variant0(inner) => inner.deref().local(),

        }
            }
        }

impl std::ops::DerefMut for Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexLocalClientProxyEnumRwLockWriteGuard<'_> {
                fn deref_mut(&mut self) -> &mut Self::Target {
                    unreachable!()
                }
            }

pub enum Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexRemoteClientProxyEnum
{
    Variant0(RustAutoOpaque<CortdexClient>),
}

pub fn frb_internal_no_impl_dummy_function_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexRemoteClientProxyEnum(
    a: Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexRemoteClientProxyEnum,
) {
}

impl Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexRemoteClientProxyEnum {
            pub fn blocking_read(&self) -> Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexRemoteClientProxyEnumRwLockReadGuard {
                match self {
            Self::Variant0(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexRemoteClientProxyEnumRwLockReadGuard::Variant0(inner.blocking_read()),

        }
            }

            pub fn blocking_write(&self) -> Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexRemoteClientProxyEnumRwLockWriteGuard {
                unreachable!()
            }

            pub async fn read(&self) -> Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexRemoteClientProxyEnumRwLockReadGuard {
                match self {
            Self::Variant0(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexRemoteClientProxyEnumRwLockReadGuard::Variant0(inner.read().await),

        }
            }

            pub async fn write(&self) -> Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexRemoteClientProxyEnumRwLockWriteGuard {
                unreachable!()
            }
        }

impl Lockable for Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexRemoteClientProxyEnum {
            type RwLockReadGuard<'a> = Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexRemoteClientProxyEnumRwLockReadGuard<'a>;
            type RwLockWriteGuard<'a> = Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexRemoteClientProxyEnumRwLockWriteGuard<'a>;

            fn lockable_order(&self) -> flutter_rust_bridge::for_generated::LockableOrder {
                match self {
            Self::Variant0(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),

        }
            }

            fn lockable_decode_sync_ref(&self) -> Self::RwLockReadGuard<'_> {
                self.blocking_read()
            }

            fn lockable_decode_sync_ref_mut(&self) -> Self::RwLockWriteGuard<'_> {
                self.blocking_write()
            }

            fn lockable_decode_async_ref<'a>(
                &'a self,
            ) -> std::pin::Pin<Box<dyn std::future::Future<Output = Self::RwLockReadGuard<'a>> + Send + 'a>>
            where
                Self: Sync + 'a,
            {
                Box::pin(async move { self.read().await })
            }

            fn lockable_decode_async_ref_mut<'a>(
                &'a self,
            ) -> std::pin::Pin<Box<dyn std::future::Future<Output = Self::RwLockWriteGuard<'a>> + Send + 'a>>
            where
                Self: Sync + 'a,
            {
                Box::pin(async move { self.write().await })
            }
        }

pub enum Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexRemoteClientProxyEnumRwLockReadGuard<
    'a,
> {
    Variant0(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, CortdexClient>),
}

impl std::ops::Deref for Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexRemoteClientProxyEnumRwLockReadGuard<'_> {
            type Target = CortdexRemoteClient;

            fn deref(&self) -> &Self::Target {
                match self {
            Self::Variant0(inner) => inner.deref().remote(),

        }
            }
        }

pub enum Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexRemoteClientProxyEnumRwLockWriteGuard<
    'a,
> {
    Variant0(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, CortdexClient>),
}

impl std::ops::Deref for Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexRemoteClientProxyEnumRwLockWriteGuard<'_> {
            type Target = CortdexRemoteClient;

            fn deref(&self) -> &Self::Target {
                match self {
            Self::Variant0(inner) => inner.deref().remote(),

        }
            }
        }

impl std::ops::DerefMut for Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexRemoteClientProxyEnumRwLockWriteGuard<'_> {
                fn deref_mut(&mut self) -> &mut Self::Target {
                    unreachable!()
                }
            }

pub enum Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerModelManagerProxyEnum
{
    Variant0(RustAutoOpaque<CortdexClient>),
}

pub fn frb_internal_no_impl_dummy_function_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerModelManagerProxyEnum(
    a: Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerModelManagerProxyEnum,
) {
}

impl Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerModelManagerProxyEnum {
    pub fn blocking_read(&self) -> Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerModelManagerProxyEnumRwLockReadGuard{
        match self {
            Self::Variant0(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerModelManagerProxyEnumRwLockReadGuard::Variant0(inner.blocking_read()),

        }
    }

    pub fn blocking_write(&self) -> Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerModelManagerProxyEnumRwLockWriteGuard{
        unreachable!()
    }

    pub async fn read(&self) -> Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerModelManagerProxyEnumRwLockReadGuard{
        match self {
            Self::Variant0(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerModelManagerProxyEnumRwLockReadGuard::Variant0(inner.read().await),

        }
    }

    pub async fn write(&self) -> Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerModelManagerProxyEnumRwLockWriteGuard{
        unreachable!()
    }
}

impl Lockable
    for Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerModelManagerProxyEnum
{
    type RwLockReadGuard<'a> = Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerModelManagerProxyEnumRwLockReadGuard<'a>;
    type RwLockWriteGuard<'a> = Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerModelManagerProxyEnumRwLockWriteGuard<'a>;

    fn lockable_order(&self) -> flutter_rust_bridge::for_generated::LockableOrder {
        match self {
            Self::Variant0(inner) => {
                flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner)
            }
        }
    }

    fn lockable_decode_sync_ref(&self) -> Self::RwLockReadGuard<'_> {
        self.blocking_read()
    }

    fn lockable_decode_sync_ref_mut(&self) -> Self::RwLockWriteGuard<'_> {
        self.blocking_write()
    }

    fn lockable_decode_async_ref<'a>(
        &'a self,
    ) -> std::pin::Pin<Box<dyn std::future::Future<Output = Self::RwLockReadGuard<'a>> + Send + 'a>>
    where
        Self: Sync + 'a,
    {
        Box::pin(async move { self.read().await })
    }

    fn lockable_decode_async_ref_mut<'a>(
        &'a self,
    ) -> std::pin::Pin<Box<dyn std::future::Future<Output = Self::RwLockWriteGuard<'a>> + Send + 'a>>
    where
        Self: Sync + 'a,
    {
        Box::pin(async move { self.write().await })
    }
}

pub enum Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerModelManagerProxyEnumRwLockReadGuard<
    'a,
> {
    Variant0(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, CortdexClient>),
}

impl std::ops::Deref for Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerModelManagerProxyEnumRwLockReadGuard<'_> {
            type Target = ModelManager;

            fn deref(&self) -> &Self::Target {
                match self {
            Self::Variant0(inner) => inner.deref().get_mm(),

        }
            }
        }

pub enum Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerModelManagerProxyEnumRwLockWriteGuard<
    'a,
> {
    Variant0(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, CortdexClient>),
}

impl std::ops::Deref for Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerModelManagerProxyEnumRwLockWriteGuard<'_> {
            type Target = ModelManager;

            fn deref(&self) -> &Self::Target {
                match self {
            Self::Variant0(inner) => inner.deref().get_mm(),

        }
            }
        }

impl std::ops::DerefMut for Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerModelManagerProxyEnumRwLockWriteGuard<'_> {
                fn deref_mut(&mut self) -> &mut Self::Target {
                    unreachable!()
                }
            }

// Section: dart2rust

impl SseDecode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::anyhow::anyhow!("{}", inner);
    }
}

impl SseDecode for RustAutoOpaqueMoi<CortdexClient> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CortdexClient>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_decode(inner);
    }
}

impl SseDecode for ConcreteCortdexCommand {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConcreteCortdexCommand>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for CortdexClient {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CortdexClient>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for CortdexError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CortdexError>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for CortdexLocalClient {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CortdexLocalClient>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for CortdexRemoteClient {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CortdexRemoteClient>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for CortdexServer {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CortdexServer>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for ModelManager {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ModelManager>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for VaultManager {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<VaultManager>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for chrono::NaiveDateTime {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i64>::sse_decode(deserializer);
        return chrono::DateTime::from_timestamp_micros(inner)
            .expect("invalid or out-of-range datetime")
            .naive_utc();
    }
}

impl SseDecode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConcreteCortdexCommand>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CortdexClient>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CortdexError>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CortdexLocalClient>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CortdexRemoteClient>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CortdexServer>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ModelManager>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<VaultManager>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode for std::collections::HashSet<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<String>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode for StreamSink<crate::api::LogEntry, flutter_rust_bridge::for_generated::SseCodec> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return StreamSink::deserialize(inner);
    }
}

impl SseDecode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();
    }
}

impl SseDecode for uuid::Uuid {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return uuid::Uuid::from_slice(&inner).expect("fail to decode uuid");
    }
}

impl SseDecode for cortdex_types::api::attribute::Attribute {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_kind = <cortdex_types::api::attribute::AttributeKind>::sse_decode(deserializer);
        let mut var_options = <Option<std::collections::HashSet<String>>>::sse_decode(deserializer);
        return cortdex_types::api::attribute::Attribute {
            name: var_name,
            kind: var_kind,
            options: var_options,
        };
    }
}

impl SseDecode for cortdex_types::api::attribute::AttributeCommand {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_noteId = <uuid::Uuid>::sse_decode(deserializer);
                let mut var_attributeName = <String>::sse_decode(deserializer);
                let mut var_attributeValue =
                    <cortdex_types::api::attribute::AttributeValue>::sse_decode(deserializer);
                return cortdex_types::api::attribute::AttributeCommand::AddToNote {
                    note_id: var_noteId,
                    attribute_name: var_attributeName,
                    attribute_value: var_attributeValue,
                };
            }
            1 => {
                let mut var_attributeName = <String>::sse_decode(deserializer);
                let mut var_newSelectable = <String>::sse_decode(deserializer);
                return cortdex_types::api::attribute::AttributeCommand::AddToSelectable {
                    attribute_name: var_attributeName,
                    new_selectable: var_newSelectable,
                };
            }
            2 => {
                let mut var_def =
                    <cortdex_types::api::attribute::Attribute>::sse_decode(deserializer);
                return cortdex_types::api::attribute::AttributeCommand::Create { def: var_def };
            }
            3 => {
                let mut var_name = <String>::sse_decode(deserializer);
                return cortdex_types::api::attribute::AttributeCommand::Get { name: var_name };
            }
            4 => {
                let mut var_noteId = <uuid::Uuid>::sse_decode(deserializer);
                return cortdex_types::api::attribute::AttributeCommand::GetAllFromNote {
                    note_id: var_noteId,
                };
            }
            5 => {
                let mut var_attributeName = <String>::sse_decode(deserializer);
                return cortdex_types::api::attribute::AttributeCommand::GetAllFromSelectable {
                    attribute_name: var_attributeName,
                };
            }
            6 => {
                let mut var_noteId = <uuid::Uuid>::sse_decode(deserializer);
                let mut var_name = <String>::sse_decode(deserializer);
                return cortdex_types::api::attribute::AttributeCommand::GetFromNote {
                    note_id: var_noteId,
                    name: var_name,
                };
            }
            7 => {
                let mut var_noteId = <uuid::Uuid>::sse_decode(deserializer);
                let mut var_name = <String>::sse_decode(deserializer);
                return cortdex_types::api::attribute::AttributeCommand::RemoveFromNote {
                    note_id: var_noteId,
                    name: var_name,
                };
            }
            8 => {
                let mut var_amount = <usize>::sse_decode(deserializer);
                let mut var_query = <String>::sse_decode(deserializer);
                let mut var_desc = <bool>::sse_decode(deserializer);
                return cortdex_types::api::attribute::AttributeCommand::Search {
                    amount: var_amount,
                    query: var_query,
                    desc: var_desc,
                };
            }
            9 => {
                let mut var_noteId = <uuid::Uuid>::sse_decode(deserializer);
                let mut var_attributeName = <String>::sse_decode(deserializer);
                let mut var_attributeValue =
                    <cortdex_types::api::attribute::AttributeValue>::sse_decode(deserializer);
                return cortdex_types::api::attribute::AttributeCommand::UpdateValueOnNote {
                    note_id: var_noteId,
                    attribute_name: var_attributeName,
                    attribute_value: var_attributeValue,
                };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for cortdex_types::api::attribute::AttributeKind {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => cortdex_types::api::attribute::AttributeKind::Object,
            1 => cortdex_types::api::attribute::AttributeKind::Text,
            2 => cortdex_types::api::attribute::AttributeKind::Number,
            3 => cortdex_types::api::attribute::AttributeKind::Select,
            4 => cortdex_types::api::attribute::AttributeKind::MultiSelect,
            5 => cortdex_types::api::attribute::AttributeKind::Checkbox,
            6 => cortdex_types::api::attribute::AttributeKind::Datetime,
            7 => cortdex_types::api::attribute::AttributeKind::Date,
            8 => cortdex_types::api::attribute::AttributeKind::Time,
            _ => unreachable!("Invalid variant for AttributeKind: {}", inner),
        };
    }
}

impl SseDecode for cortdex_types::api::attribute::AttributeValue {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <uuid::Uuid>::sse_decode(deserializer);
                return cortdex_types::api::attribute::AttributeValue::Object(var_field0);
            }
            1 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return cortdex_types::api::attribute::AttributeValue::Text(var_field0);
            }
            2 => {
                let mut var_field0 = <f64>::sse_decode(deserializer);
                return cortdex_types::api::attribute::AttributeValue::Number(var_field0);
            }
            3 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return cortdex_types::api::attribute::AttributeValue::Select(var_field0);
            }
            4 => {
                let mut var_field0 = <std::collections::HashSet<String>>::sse_decode(deserializer);
                return cortdex_types::api::attribute::AttributeValue::MultiSelect(var_field0);
            }
            5 => {
                let mut var_field0 = <bool>::sse_decode(deserializer);
                return cortdex_types::api::attribute::AttributeValue::Checkbox(var_field0);
            }
            6 => {
                let mut var_field0 = <chrono::NaiveDateTime>::sse_decode(deserializer);
                return cortdex_types::api::attribute::AttributeValue::Datetime(var_field0);
            }
            7 => {
                let mut var_field0 = <chrono::NaiveDateTime>::sse_decode(deserializer);
                return cortdex_types::api::attribute::AttributeValue::Date(var_field0);
            }
            8 => {
                let mut var_field0 = <chrono::NaiveDateTime>::sse_decode(deserializer);
                return cortdex_types::api::attribute::AttributeValue::Time(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for cortdex_types::api::attribute::AttributeWithValue {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_kind = <cortdex_types::api::attribute::AttributeKind>::sse_decode(deserializer);
        let mut var_options = <Option<std::collections::HashSet<String>>>::sse_decode(deserializer);
        let mut var_value =
            <cortdex_types::api::attribute::AttributeValue>::sse_decode(deserializer);
        let mut var_noteId = <uuid::Uuid>::sse_decode(deserializer);
        return cortdex_types::api::attribute::AttributeWithValue {
            name: var_name,
            kind: var_kind,
            options: var_options,
            value: var_value,
            note_id: var_noteId,
        };
    }
}

impl SseDecode for crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexLocalClientProxyEnum {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut tag_ = <i32>::sse_decode(deserializer);
            match tag_ {0 => { let mut var_field0 = <RustAutoOpaqueMoi<CortdexClient>>::sse_decode(deserializer);
return crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexLocalClientProxyEnum::Variant0(var_field0); }
 _ => { unimplemented!(""); }}}
                }

impl SseDecode for crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexRemoteClientProxyEnum {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut tag_ = <i32>::sse_decode(deserializer);
            match tag_ {0 => { let mut var_field0 = <RustAutoOpaqueMoi<CortdexClient>>::sse_decode(deserializer);
return crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexRemoteClientProxyEnum::Variant0(var_field0); }
 _ => { unimplemented!(""); }}}
                }

impl SseDecode for crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerModelManagerProxyEnum {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut tag_ = <i32>::sse_decode(deserializer);
            match tag_ {0 => { let mut var_field0 = <RustAutoOpaqueMoi<CortdexClient>>::sse_decode(deserializer);
return crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerModelManagerProxyEnum::Variant0(var_field0); }
 _ => { unimplemented!(""); }}}
                }

impl SseDecode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap() != 0
    }
}

impl SseDecode for crate::api::ConnectionSettings {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_dbPath = <cortdex_db::api::DbPath>::sse_decode(deserializer);
                let mut var_modelPath = <String>::sse_decode(deserializer);
                return crate::api::ConnectionSettings::Embedded {
                    db_path: var_dbPath,
                    model_path: var_modelPath,
                };
            }
            1 => {
                let mut var_host = <String>::sse_decode(deserializer);
                let mut var_port = <u16>::sse_decode(deserializer);
                return crate::api::ConnectionSettings::Remote {
                    host: var_host,
                    port: var_port,
                };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for cortdex_db::api::DbPath {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_path = <String>::sse_decode(deserializer);
                return cortdex_db::api::DbPath::Local { path: var_path };
            }
            1 => {
                let mut var_address = <String>::sse_decode(deserializer);
                let mut var_port = <u16>::sse_decode(deserializer);
                return cortdex_db::api::DbPath::Remote {
                    address: var_address,
                    port: var_port,
                };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for f64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_f64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for i64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for Vec<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<String>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u8>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for crate::api::LogEntry {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_timeMillis = <i64>::sse_decode(deserializer);
        let mut var_level = <i32>::sse_decode(deserializer);
        let mut var_tag = <String>::sse_decode(deserializer);
        let mut var_msg = <String>::sse_decode(deserializer);
        return crate::api::LogEntry {
            time_millis: var_timeMillis,
            level: var_level,
            tag: var_tag,
            msg: var_msg,
        };
    }
}

impl SseDecode for cortdex_ml::api::manager::ModelManagerConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_selected = <String>::sse_decode(deserializer);
        let mut var_dir = <String>::sse_decode(deserializer);
        let mut var_modelDir = <String>::sse_decode(deserializer);
        return cortdex_ml::api::manager::ModelManagerConfig {
            selected: var_selected,
            dir: var_dir,
            model_dir: var_modelDir,
        };
    }
}

impl SseDecode for cortdex_types::api::note::Note {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <uuid::Uuid>::sse_decode(deserializer);
        let mut var_title = <String>::sse_decode(deserializer);
        let mut var_content = <String>::sse_decode(deserializer);
        let mut var_path = <String>::sse_decode(deserializer);
        return cortdex_types::api::note::Note {
            id: var_id,
            title: var_title,
            content: var_content,
            path: var_path,
        };
    }
}

impl SseDecode for cortdex_types::api::note::NoteCommand {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_id = <uuid::Uuid>::sse_decode(deserializer);
                let mut var_newTitle = <String>::sse_decode(deserializer);
                return cortdex_types::api::note::NoteCommand::ChangeTitle {
                    id: var_id,
                    new_title: var_newTitle,
                };
            }
            1 => {
                let mut var_id = <uuid::Uuid>::sse_decode(deserializer);
                let mut var_newContent = <String>::sse_decode(deserializer);
                return cortdex_types::api::note::NoteCommand::ChangeContent {
                    id: var_id,
                    new_content: var_newContent,
                };
            }
            2 => {
                return cortdex_types::api::note::NoteCommand::Create;
            }
            3 => {
                let mut var_id = <uuid::Uuid>::sse_decode(deserializer);
                return cortdex_types::api::note::NoteCommand::Get { id: var_id };
            }
            4 => {
                let mut var_id = <uuid::Uuid>::sse_decode(deserializer);
                return cortdex_types::api::note::NoteCommand::Delete { id: var_id };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for cortdex_types::api::note::NoteQuery {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_amount = <usize>::sse_decode(deserializer);
                let mut var_text = <String>::sse_decode(deserializer);
                return cortdex_types::api::note::NoteQuery::Basic {
                    amount: var_amount,
                    text: var_text,
                };
            }
            1 => {
                let mut var_amount = <usize>::sse_decode(deserializer);
                let mut var_text = <String>::sse_decode(deserializer);
                return cortdex_types::api::note::NoteQuery::Full {
                    amount: var_amount,
                    text: var_text,
                };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for Option<std::collections::HashSet<String>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<std::collections::HashSet<String>>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<String>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<cortdex_types::api::attribute::AttributeKind> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<cortdex_types::api::attribute::AttributeKind>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for crate::api::ServerSettings {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_port = <u16>::sse_decode(deserializer);
        let mut var_dbPath = <cortdex_db::api::DbPath>::sse_decode(deserializer);
        let mut var_modelPath = <String>::sse_decode(deserializer);
        return crate::api::ServerSettings {
            port: var_port,
            db_path: var_dbPath,
            model_path: var_modelPath,
        };
    }
}

impl SseDecode for u16 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u16::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap()
    }
}

impl SseDecode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {}
}

impl SseDecode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
    }
}

fn pde_ffi_dispatcher_primary_impl(
    func_id: i32,
    port: flutter_rust_bridge::for_generated::MessagePort,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        3 => wire__crate__api__CortdexClient_new_impl(port, ptr, rust_vec_len, data_len),
        4 => {
            wire__crate__api__CortdexClient_process_command_impl(port, ptr, rust_vec_len, data_len)
        }
        7 => wire__crate__inner__client__CortdexLocalClient_change_model_manager_config_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        8 => wire__crate__inner__client__CortdexLocalClient_download_new_model_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        9 => wire__crate__inner__client__CortdexLocalClient_get_all_models_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        10 => wire__crate__inner__client__CortdexLocalClient_get_model_manager_config_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        11 => wire__crate__inner__client__CortdexLocalClient_load_model_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        12 => wire__crate__inner__client__CortdexLocalClient_remove_model_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        13 => wire__crate__inner__client__CortdexRemoteClient_connect_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        14 => {
            wire__crate__inner__server__CortdexServer_start_impl(port, ptr, rust_vec_len, data_len)
        }
        15 => {
            wire__crate__inner__server__CortdexServer_stop_impl(port, ptr, rust_vec_len, data_len)
        }
        16 => wire__cortdex_ml__manager__ModelManager_download_new_model_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        17 => wire__cortdex_ml__manager__ModelManager_get_all_models_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        18 => wire__cortdex_ml__manager__ModelManager_remove_model_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        19 => wire__cortdex_ml__manager__ModelManager_serialized_settings_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        21 => wire__cortdex_db__api__git__VaultManager_init_vault_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        22 => wire__cortdex_db__api__git__VaultManager_list_all_vaults_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        23 => wire__cortdex_db__api__git__VaultManager_load_vault_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        24 => {
            wire__cortdex_db__api__git__VaultManager_start_impl(port, ptr, rust_vec_len, data_len)
        }
        27 => wire__cortdex_types__api__attribute__attribute_value_kind_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        28 => wire__crate__api__create_log_stream_impl(port, ptr, rust_vec_len, data_len),
        32 => wire__crate__api__init_app_impl(port, ptr, rust_vec_len, data_len),
        39 => wire__crate__api__read_markdown_file_impl(port, ptr, rust_vec_len, data_len),
        40 => wire__crate__api__write_markdown_file_impl(port, ptr, rust_vec_len, data_len),
        _ => unreachable!(),
    }
}

fn pde_ffi_dispatcher_sync_impl(
    func_id: i32,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        6 => wire__crate__api__error__CortdexError_get_message_impl(ptr, rust_vec_len, data_len),
        25 => wire__cortdex_types__api__attribute__attribute_command_into_ccd_impl(
            ptr,
            rust_vec_len,
            data_len,
        ),
        26 => wire__cortdex_types__api__attribute__attribute_kind_from_string_impl(
            ptr,
            rust_vec_len,
            data_len,
        ),
        33 => wire__cortdex_ml__api__manager__model_manager_config_new_basic_impl(
            ptr,
            rust_vec_len,
            data_len,
        ),
        34 => {
            wire__cortdex_types__api__note__note_command_into_ccd_impl(ptr, rust_vec_len, data_len)
        }
        35 => wire__cortdex_types__api__note__note_default_impl(ptr, rust_vec_len, data_len),
        36 => wire__cortdex_types__api__note__note_new_impl(ptr, rust_vec_len, data_len),
        37 => wire__cortdex_types__api__note__note_query_into_ccd_impl(ptr, rust_vec_len, data_len),
        38 => wire__cortdex_types__api__note__note_with_path_impl(ptr, rust_vec_len, data_len),
        _ => unreachable!(),
    }
}

// Section: rust2dart

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<ConcreteCortdexCommand> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<ConcreteCortdexCommand>
{
}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<ConcreteCortdexCommand>>
    for ConcreteCortdexCommand
{
    fn into_into_dart(self) -> FrbWrapper<ConcreteCortdexCommand> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<CortdexClient> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<CortdexClient> {}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<CortdexClient>> for CortdexClient {
    fn into_into_dart(self) -> FrbWrapper<CortdexClient> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<CortdexError> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<CortdexError> {}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<CortdexError>> for CortdexError {
    fn into_into_dart(self) -> FrbWrapper<CortdexError> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<CortdexLocalClient> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<CortdexLocalClient>
{
}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<CortdexLocalClient>> for CortdexLocalClient {
    fn into_into_dart(self) -> FrbWrapper<CortdexLocalClient> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<CortdexRemoteClient> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<CortdexRemoteClient>
{
}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<CortdexRemoteClient>> for CortdexRemoteClient {
    fn into_into_dart(self) -> FrbWrapper<CortdexRemoteClient> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<CortdexServer> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<CortdexServer> {}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<CortdexServer>> for CortdexServer {
    fn into_into_dart(self) -> FrbWrapper<CortdexServer> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<ModelManager> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<ModelManager> {}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<ModelManager>> for ModelManager {
    fn into_into_dart(self) -> FrbWrapper<ModelManager> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<VaultManager> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<VaultManager> {}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<VaultManager>> for VaultManager {
    fn into_into_dart(self) -> FrbWrapper<VaultManager> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<cortdex_types::api::attribute::Attribute> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.name.into_into_dart().into_dart(),
            self.0.kind.into_into_dart().into_dart(),
            self.0.options.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<cortdex_types::api::attribute::Attribute>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<cortdex_types::api::attribute::Attribute>>
    for cortdex_types::api::attribute::Attribute
{
    fn into_into_dart(self) -> FrbWrapper<cortdex_types::api::attribute::Attribute> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<cortdex_types::api::attribute::AttributeCommand> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            cortdex_types::api::attribute::AttributeCommand::AddToNote {
                note_id,
                attribute_name,
                attribute_value,
            } => [
                0.into_dart(),
                note_id.into_into_dart().into_dart(),
                attribute_name.into_into_dart().into_dart(),
                attribute_value.into_into_dart().into_dart(),
            ]
            .into_dart(),
            cortdex_types::api::attribute::AttributeCommand::AddToSelectable {
                attribute_name,
                new_selectable,
            } => [
                1.into_dart(),
                attribute_name.into_into_dart().into_dart(),
                new_selectable.into_into_dart().into_dart(),
            ]
            .into_dart(),
            cortdex_types::api::attribute::AttributeCommand::Create { def } => {
                [2.into_dart(), def.into_into_dart().into_dart()].into_dart()
            }
            cortdex_types::api::attribute::AttributeCommand::Get { name } => {
                [3.into_dart(), name.into_into_dart().into_dart()].into_dart()
            }
            cortdex_types::api::attribute::AttributeCommand::GetAllFromNote { note_id } => {
                [4.into_dart(), note_id.into_into_dart().into_dart()].into_dart()
            }
            cortdex_types::api::attribute::AttributeCommand::GetAllFromSelectable {
                attribute_name,
            } => [5.into_dart(), attribute_name.into_into_dart().into_dart()].into_dart(),
            cortdex_types::api::attribute::AttributeCommand::GetFromNote { note_id, name } => [
                6.into_dart(),
                note_id.into_into_dart().into_dart(),
                name.into_into_dart().into_dart(),
            ]
            .into_dart(),
            cortdex_types::api::attribute::AttributeCommand::RemoveFromNote { note_id, name } => [
                7.into_dart(),
                note_id.into_into_dart().into_dart(),
                name.into_into_dart().into_dart(),
            ]
            .into_dart(),
            cortdex_types::api::attribute::AttributeCommand::Search {
                amount,
                query,
                desc,
            } => [
                8.into_dart(),
                amount.into_into_dart().into_dart(),
                query.into_into_dart().into_dart(),
                desc.into_into_dart().into_dart(),
            ]
            .into_dart(),
            cortdex_types::api::attribute::AttributeCommand::UpdateValueOnNote {
                note_id,
                attribute_name,
                attribute_value,
            } => [
                9.into_dart(),
                note_id.into_into_dart().into_dart(),
                attribute_name.into_into_dart().into_dart(),
                attribute_value.into_into_dart().into_dart(),
            ]
            .into_dart(),
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<cortdex_types::api::attribute::AttributeCommand>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<cortdex_types::api::attribute::AttributeCommand>>
    for cortdex_types::api::attribute::AttributeCommand
{
    fn into_into_dart(self) -> FrbWrapper<cortdex_types::api::attribute::AttributeCommand> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<cortdex_types::api::attribute::AttributeKind> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            cortdex_types::api::attribute::AttributeKind::Object => 0.into_dart(),
            cortdex_types::api::attribute::AttributeKind::Text => 1.into_dart(),
            cortdex_types::api::attribute::AttributeKind::Number => 2.into_dart(),
            cortdex_types::api::attribute::AttributeKind::Select => 3.into_dart(),
            cortdex_types::api::attribute::AttributeKind::MultiSelect => 4.into_dart(),
            cortdex_types::api::attribute::AttributeKind::Checkbox => 5.into_dart(),
            cortdex_types::api::attribute::AttributeKind::Datetime => 6.into_dart(),
            cortdex_types::api::attribute::AttributeKind::Date => 7.into_dart(),
            cortdex_types::api::attribute::AttributeKind::Time => 8.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<cortdex_types::api::attribute::AttributeKind>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<cortdex_types::api::attribute::AttributeKind>>
    for cortdex_types::api::attribute::AttributeKind
{
    fn into_into_dart(self) -> FrbWrapper<cortdex_types::api::attribute::AttributeKind> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<cortdex_types::api::attribute::AttributeValue> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            cortdex_types::api::attribute::AttributeValue::Object(field0) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            cortdex_types::api::attribute::AttributeValue::Text(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            cortdex_types::api::attribute::AttributeValue::Number(field0) => {
                [2.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            cortdex_types::api::attribute::AttributeValue::Select(field0) => {
                [3.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            cortdex_types::api::attribute::AttributeValue::MultiSelect(field0) => {
                [4.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            cortdex_types::api::attribute::AttributeValue::Checkbox(field0) => {
                [5.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            cortdex_types::api::attribute::AttributeValue::Datetime(field0) => {
                [6.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            cortdex_types::api::attribute::AttributeValue::Date(field0) => {
                [7.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            cortdex_types::api::attribute::AttributeValue::Time(field0) => {
                [8.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<cortdex_types::api::attribute::AttributeValue>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<cortdex_types::api::attribute::AttributeValue>>
    for cortdex_types::api::attribute::AttributeValue
{
    fn into_into_dart(self) -> FrbWrapper<cortdex_types::api::attribute::AttributeValue> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for FrbWrapper<cortdex_types::api::attribute::AttributeWithValue>
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.name.into_into_dart().into_dart(),
            self.0.kind.into_into_dart().into_dart(),
            self.0.options.into_into_dart().into_dart(),
            self.0.value.into_into_dart().into_dart(),
            self.0.note_id.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<cortdex_types::api::attribute::AttributeWithValue>
{
}
impl
    flutter_rust_bridge::IntoIntoDart<FrbWrapper<cortdex_types::api::attribute::AttributeWithValue>>
    for cortdex_types::api::attribute::AttributeWithValue
{
    fn into_into_dart(self) -> FrbWrapper<cortdex_types::api::attribute::AttributeWithValue> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexLocalClientProxyEnum {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    match self {crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexLocalClientProxyEnum::Variant0(field0) => { [0.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
 _ => { unimplemented!(""); }}
                }
            }
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexLocalClientProxyEnum {}
impl flutter_rust_bridge::IntoIntoDart<crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexLocalClientProxyEnum> for crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexLocalClientProxyEnum {
            fn into_into_dart(self) -> crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexLocalClientProxyEnum {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexRemoteClientProxyEnum {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    match self {crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexRemoteClientProxyEnum::Variant0(field0) => { [0.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
 _ => { unimplemented!(""); }}
                }
            }
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexRemoteClientProxyEnum {}
impl flutter_rust_bridge::IntoIntoDart<crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexRemoteClientProxyEnum> for crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexRemoteClientProxyEnum {
            fn into_into_dart(self) -> crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexRemoteClientProxyEnum {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerModelManagerProxyEnum {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    match self {crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerModelManagerProxyEnum::Variant0(field0) => { [0.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
 _ => { unimplemented!(""); }}
                }
            }
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerModelManagerProxyEnum {}
impl flutter_rust_bridge::IntoIntoDart<crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerModelManagerProxyEnum> for crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerModelManagerProxyEnum {
            fn into_into_dart(self) -> crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerModelManagerProxyEnum {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::ConnectionSettings {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::ConnectionSettings::Embedded {
                db_path,
                model_path,
            } => [
                0.into_dart(),
                db_path.into_into_dart().into_dart(),
                model_path.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::api::ConnectionSettings::Remote { host, port } => [
                1.into_dart(),
                host.into_into_dart().into_dart(),
                port.into_into_dart().into_dart(),
            ]
            .into_dart(),
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::ConnectionSettings
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::ConnectionSettings>
    for crate::api::ConnectionSettings
{
    fn into_into_dart(self) -> crate::api::ConnectionSettings {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<cortdex_db::api::DbPath> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            cortdex_db::api::DbPath::Local { path } => {
                [0.into_dart(), path.into_into_dart().into_dart()].into_dart()
            }
            cortdex_db::api::DbPath::Remote { address, port } => [
                1.into_dart(),
                address.into_into_dart().into_dart(),
                port.into_into_dart().into_dart(),
            ]
            .into_dart(),
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<cortdex_db::api::DbPath>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<cortdex_db::api::DbPath>>
    for cortdex_db::api::DbPath
{
    fn into_into_dart(self) -> FrbWrapper<cortdex_db::api::DbPath> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::LogEntry {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.time_millis.into_into_dart().into_dart(),
            self.level.into_into_dart().into_dart(),
            self.tag.into_into_dart().into_dart(),
            self.msg.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::LogEntry {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::LogEntry> for crate::api::LogEntry {
    fn into_into_dart(self) -> crate::api::LogEntry {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<cortdex_ml::api::manager::ModelManagerConfig> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.selected.into_into_dart().into_dart(),
            self.0.dir.into_into_dart().into_dart(),
            self.0.model_dir.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<cortdex_ml::api::manager::ModelManagerConfig>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<cortdex_ml::api::manager::ModelManagerConfig>>
    for cortdex_ml::api::manager::ModelManagerConfig
{
    fn into_into_dart(self) -> FrbWrapper<cortdex_ml::api::manager::ModelManagerConfig> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<cortdex_types::api::note::Note> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.id.into_into_dart().into_dart(),
            self.0.title.into_into_dart().into_dart(),
            self.0.content.into_into_dart().into_dart(),
            self.0.path.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<cortdex_types::api::note::Note>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<cortdex_types::api::note::Note>>
    for cortdex_types::api::note::Note
{
    fn into_into_dart(self) -> FrbWrapper<cortdex_types::api::note::Note> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<cortdex_types::api::note::NoteCommand> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            cortdex_types::api::note::NoteCommand::ChangeTitle { id, new_title } => [
                0.into_dart(),
                id.into_into_dart().into_dart(),
                new_title.into_into_dart().into_dart(),
            ]
            .into_dart(),
            cortdex_types::api::note::NoteCommand::ChangeContent { id, new_content } => [
                1.into_dart(),
                id.into_into_dart().into_dart(),
                new_content.into_into_dart().into_dart(),
            ]
            .into_dart(),
            cortdex_types::api::note::NoteCommand::Create => [2.into_dart()].into_dart(),
            cortdex_types::api::note::NoteCommand::Get { id } => {
                [3.into_dart(), id.into_into_dart().into_dart()].into_dart()
            }
            cortdex_types::api::note::NoteCommand::Delete { id } => {
                [4.into_dart(), id.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<cortdex_types::api::note::NoteCommand>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<cortdex_types::api::note::NoteCommand>>
    for cortdex_types::api::note::NoteCommand
{
    fn into_into_dart(self) -> FrbWrapper<cortdex_types::api::note::NoteCommand> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<cortdex_types::api::note::NoteQuery> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            cortdex_types::api::note::NoteQuery::Basic { amount, text } => [
                0.into_dart(),
                amount.into_into_dart().into_dart(),
                text.into_into_dart().into_dart(),
            ]
            .into_dart(),
            cortdex_types::api::note::NoteQuery::Full { amount, text } => [
                1.into_dart(),
                amount.into_into_dart().into_dart(),
                text.into_into_dart().into_dart(),
            ]
            .into_dart(),
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<cortdex_types::api::note::NoteQuery>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<cortdex_types::api::note::NoteQuery>>
    for cortdex_types::api::note::NoteQuery
{
    fn into_into_dart(self) -> FrbWrapper<cortdex_types::api::note::NoteQuery> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::ServerSettings {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.port.into_into_dart().into_dart(),
            self.db_path.into_into_dart().into_dart(),
            self.model_path.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::ServerSettings {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::ServerSettings> for crate::api::ServerSettings {
    fn into_into_dart(self) -> crate::api::ServerSettings {
        self
    }
}

impl SseEncode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(format!("{:?}", self), serializer);
    }
}

impl SseEncode for RustAutoOpaqueMoi<CortdexClient> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CortdexClient>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_encode(self), serializer);
    }
}

impl SseEncode for ConcreteCortdexCommand {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConcreteCortdexCommand>,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for CortdexClient {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CortdexClient>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);
    }
}

impl SseEncode for CortdexError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CortdexError>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);
    }
}

impl SseEncode for CortdexLocalClient {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CortdexLocalClient>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);
    }
}

impl SseEncode for CortdexRemoteClient {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CortdexRemoteClient>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);
    }
}

impl SseEncode for CortdexServer {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CortdexServer>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);
    }
}

impl SseEncode for ModelManager {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ModelManager>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);
    }
}

impl SseEncode for VaultManager {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<VaultManager>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);
    }
}

impl SseEncode for chrono::NaiveDateTime {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i64>::sse_encode(self.and_utc().timestamp_micros(), serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConcreteCortdexCommand>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CortdexClient>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CortdexError>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CortdexLocalClient>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CortdexRemoteClient>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CortdexServer>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ModelManager>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<VaultManager>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for std::collections::HashSet<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<String>>::sse_encode(self.into_iter().collect(), serializer);
    }
}

impl SseEncode for StreamSink<crate::api::LogEntry, flutter_rust_bridge::for_generated::SseCodec> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        unimplemented!("")
    }
}

impl SseEncode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
    }
}

impl SseEncode for uuid::Uuid {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.as_bytes().to_vec(), serializer);
    }
}

impl SseEncode for cortdex_types::api::attribute::Attribute {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.name, serializer);
        <cortdex_types::api::attribute::AttributeKind>::sse_encode(self.kind, serializer);
        <Option<std::collections::HashSet<String>>>::sse_encode(self.options, serializer);
    }
}

impl SseEncode for cortdex_types::api::attribute::AttributeCommand {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            cortdex_types::api::attribute::AttributeCommand::AddToNote {
                note_id,
                attribute_name,
                attribute_value,
            } => {
                <i32>::sse_encode(0, serializer);
                <uuid::Uuid>::sse_encode(note_id, serializer);
                <String>::sse_encode(attribute_name, serializer);
                <cortdex_types::api::attribute::AttributeValue>::sse_encode(
                    attribute_value,
                    serializer,
                );
            }
            cortdex_types::api::attribute::AttributeCommand::AddToSelectable {
                attribute_name,
                new_selectable,
            } => {
                <i32>::sse_encode(1, serializer);
                <String>::sse_encode(attribute_name, serializer);
                <String>::sse_encode(new_selectable, serializer);
            }
            cortdex_types::api::attribute::AttributeCommand::Create { def } => {
                <i32>::sse_encode(2, serializer);
                <cortdex_types::api::attribute::Attribute>::sse_encode(def, serializer);
            }
            cortdex_types::api::attribute::AttributeCommand::Get { name } => {
                <i32>::sse_encode(3, serializer);
                <String>::sse_encode(name, serializer);
            }
            cortdex_types::api::attribute::AttributeCommand::GetAllFromNote { note_id } => {
                <i32>::sse_encode(4, serializer);
                <uuid::Uuid>::sse_encode(note_id, serializer);
            }
            cortdex_types::api::attribute::AttributeCommand::GetAllFromSelectable {
                attribute_name,
            } => {
                <i32>::sse_encode(5, serializer);
                <String>::sse_encode(attribute_name, serializer);
            }
            cortdex_types::api::attribute::AttributeCommand::GetFromNote { note_id, name } => {
                <i32>::sse_encode(6, serializer);
                <uuid::Uuid>::sse_encode(note_id, serializer);
                <String>::sse_encode(name, serializer);
            }
            cortdex_types::api::attribute::AttributeCommand::RemoveFromNote { note_id, name } => {
                <i32>::sse_encode(7, serializer);
                <uuid::Uuid>::sse_encode(note_id, serializer);
                <String>::sse_encode(name, serializer);
            }
            cortdex_types::api::attribute::AttributeCommand::Search {
                amount,
                query,
                desc,
            } => {
                <i32>::sse_encode(8, serializer);
                <usize>::sse_encode(amount, serializer);
                <String>::sse_encode(query, serializer);
                <bool>::sse_encode(desc, serializer);
            }
            cortdex_types::api::attribute::AttributeCommand::UpdateValueOnNote {
                note_id,
                attribute_name,
                attribute_value,
            } => {
                <i32>::sse_encode(9, serializer);
                <uuid::Uuid>::sse_encode(note_id, serializer);
                <String>::sse_encode(attribute_name, serializer);
                <cortdex_types::api::attribute::AttributeValue>::sse_encode(
                    attribute_value,
                    serializer,
                );
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for cortdex_types::api::attribute::AttributeKind {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                cortdex_types::api::attribute::AttributeKind::Object => 0,
                cortdex_types::api::attribute::AttributeKind::Text => 1,
                cortdex_types::api::attribute::AttributeKind::Number => 2,
                cortdex_types::api::attribute::AttributeKind::Select => 3,
                cortdex_types::api::attribute::AttributeKind::MultiSelect => 4,
                cortdex_types::api::attribute::AttributeKind::Checkbox => 5,
                cortdex_types::api::attribute::AttributeKind::Datetime => 6,
                cortdex_types::api::attribute::AttributeKind::Date => 7,
                cortdex_types::api::attribute::AttributeKind::Time => 8,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for cortdex_types::api::attribute::AttributeValue {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            cortdex_types::api::attribute::AttributeValue::Object(field0) => {
                <i32>::sse_encode(0, serializer);
                <uuid::Uuid>::sse_encode(field0, serializer);
            }
            cortdex_types::api::attribute::AttributeValue::Text(field0) => {
                <i32>::sse_encode(1, serializer);
                <String>::sse_encode(field0, serializer);
            }
            cortdex_types::api::attribute::AttributeValue::Number(field0) => {
                <i32>::sse_encode(2, serializer);
                <f64>::sse_encode(field0, serializer);
            }
            cortdex_types::api::attribute::AttributeValue::Select(field0) => {
                <i32>::sse_encode(3, serializer);
                <String>::sse_encode(field0, serializer);
            }
            cortdex_types::api::attribute::AttributeValue::MultiSelect(field0) => {
                <i32>::sse_encode(4, serializer);
                <std::collections::HashSet<String>>::sse_encode(field0, serializer);
            }
            cortdex_types::api::attribute::AttributeValue::Checkbox(field0) => {
                <i32>::sse_encode(5, serializer);
                <bool>::sse_encode(field0, serializer);
            }
            cortdex_types::api::attribute::AttributeValue::Datetime(field0) => {
                <i32>::sse_encode(6, serializer);
                <chrono::NaiveDateTime>::sse_encode(field0, serializer);
            }
            cortdex_types::api::attribute::AttributeValue::Date(field0) => {
                <i32>::sse_encode(7, serializer);
                <chrono::NaiveDateTime>::sse_encode(field0, serializer);
            }
            cortdex_types::api::attribute::AttributeValue::Time(field0) => {
                <i32>::sse_encode(8, serializer);
                <chrono::NaiveDateTime>::sse_encode(field0, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for cortdex_types::api::attribute::AttributeWithValue {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.name, serializer);
        <cortdex_types::api::attribute::AttributeKind>::sse_encode(self.kind, serializer);
        <Option<std::collections::HashSet<String>>>::sse_encode(self.options, serializer);
        <cortdex_types::api::attribute::AttributeValue>::sse_encode(self.value, serializer);
        <uuid::Uuid>::sse_encode(self.note_id, serializer);
    }
}

impl SseEncode for crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexLocalClientProxyEnum {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {match self {crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexLocalClientProxyEnum::Variant0(field0) => { <i32>::sse_encode(0, serializer); <RustAutoOpaqueMoi<CortdexClient>>::sse_encode(field0, serializer);
 }
 _ => { unimplemented!(""); }}}
                }

impl SseEncode for crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexRemoteClientProxyEnum {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {match self {crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexRemoteClientProxyEnum::Variant0(field0) => { <i32>::sse_encode(0, serializer); <RustAutoOpaqueMoi<CortdexClient>>::sse_encode(field0, serializer);
 }
 _ => { unimplemented!(""); }}}
                }

impl SseEncode for crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerModelManagerProxyEnum {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {match self {crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerModelManagerProxyEnum::Variant0(field0) => { <i32>::sse_encode(0, serializer); <RustAutoOpaqueMoi<CortdexClient>>::sse_encode(field0, serializer);
 }
 _ => { unimplemented!(""); }}}
                }

impl SseEncode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self as _).unwrap();
    }
}

impl SseEncode for crate::api::ConnectionSettings {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::ConnectionSettings::Embedded {
                db_path,
                model_path,
            } => {
                <i32>::sse_encode(0, serializer);
                <cortdex_db::api::DbPath>::sse_encode(db_path, serializer);
                <String>::sse_encode(model_path, serializer);
            }
            crate::api::ConnectionSettings::Remote { host, port } => {
                <i32>::sse_encode(1, serializer);
                <String>::sse_encode(host, serializer);
                <u16>::sse_encode(port, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for cortdex_db::api::DbPath {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            cortdex_db::api::DbPath::Local { path } => {
                <i32>::sse_encode(0, serializer);
                <String>::sse_encode(path, serializer);
            }
            cortdex_db::api::DbPath::Remote { address, port } => {
                <i32>::sse_encode(1, serializer);
                <String>::sse_encode(address, serializer);
                <u16>::sse_encode(port, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for f64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_f64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for i64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for Vec<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <String>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u8>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for crate::api::LogEntry {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i64>::sse_encode(self.time_millis, serializer);
        <i32>::sse_encode(self.level, serializer);
        <String>::sse_encode(self.tag, serializer);
        <String>::sse_encode(self.msg, serializer);
    }
}

impl SseEncode for cortdex_ml::api::manager::ModelManagerConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.selected, serializer);
        <String>::sse_encode(self.dir, serializer);
        <String>::sse_encode(self.model_dir, serializer);
    }
}

impl SseEncode for cortdex_types::api::note::Note {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <uuid::Uuid>::sse_encode(self.id, serializer);
        <String>::sse_encode(self.title, serializer);
        <String>::sse_encode(self.content, serializer);
        <String>::sse_encode(self.path, serializer);
    }
}

impl SseEncode for cortdex_types::api::note::NoteCommand {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            cortdex_types::api::note::NoteCommand::ChangeTitle { id, new_title } => {
                <i32>::sse_encode(0, serializer);
                <uuid::Uuid>::sse_encode(id, serializer);
                <String>::sse_encode(new_title, serializer);
            }
            cortdex_types::api::note::NoteCommand::ChangeContent { id, new_content } => {
                <i32>::sse_encode(1, serializer);
                <uuid::Uuid>::sse_encode(id, serializer);
                <String>::sse_encode(new_content, serializer);
            }
            cortdex_types::api::note::NoteCommand::Create => {
                <i32>::sse_encode(2, serializer);
            }
            cortdex_types::api::note::NoteCommand::Get { id } => {
                <i32>::sse_encode(3, serializer);
                <uuid::Uuid>::sse_encode(id, serializer);
            }
            cortdex_types::api::note::NoteCommand::Delete { id } => {
                <i32>::sse_encode(4, serializer);
                <uuid::Uuid>::sse_encode(id, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for cortdex_types::api::note::NoteQuery {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            cortdex_types::api::note::NoteQuery::Basic { amount, text } => {
                <i32>::sse_encode(0, serializer);
                <usize>::sse_encode(amount, serializer);
                <String>::sse_encode(text, serializer);
            }
            cortdex_types::api::note::NoteQuery::Full { amount, text } => {
                <i32>::sse_encode(1, serializer);
                <usize>::sse_encode(amount, serializer);
                <String>::sse_encode(text, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for Option<std::collections::HashSet<String>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <std::collections::HashSet<String>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <String>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<cortdex_types::api::attribute::AttributeKind> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <cortdex_types::api::attribute::AttributeKind>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for crate::api::ServerSettings {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u16>::sse_encode(self.port, serializer);
        <cortdex_db::api::DbPath>::sse_encode(self.db_path, serializer);
        <String>::sse_encode(self.model_path, serializer);
    }
}

impl SseEncode for u16 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u16::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self).unwrap();
    }
}

impl SseEncode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer
            .cursor
            .write_u64::<NativeEndian>(self as _)
            .unwrap();
    }
}

#[cfg(not(target_family = "wasm"))]
mod io {
    // This file is automatically generated, so please do not edit it.
    // @generated by `flutter_rust_bridge`@ 2.10.0.

    // Section: imports

    use super::*;
    use crate::api::error::*;
    use crate::api::IntoConcreteCortexCommand;
    use crate::api::*;
    use crate::inner::client::*;
    use crate::inner::command::*;
    use crate::inner::server::*;
    use cortdex_db::api::git::*;
    use cortdex_ml::manager::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};

    // Section: boilerplate

    flutter_rust_bridge::frb_generated_boilerplate_io!();

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_cortdex_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteCortdexCommand(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConcreteCortdexCommand>>::increment_strong_count(ptr as _);
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_cortdex_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteCortdexCommand(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConcreteCortdexCommand>>::decrement_strong_count(ptr as _);
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_cortdex_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexClient(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CortdexClient>>::increment_strong_count(ptr as _);
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_cortdex_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexClient(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CortdexClient>>::decrement_strong_count(ptr as _);
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_cortdex_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexError(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CortdexError>>::increment_strong_count(ptr as _);
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_cortdex_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexError(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CortdexError>>::decrement_strong_count(ptr as _);
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_cortdex_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexLocalClient(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CortdexLocalClient>>::increment_strong_count(ptr as _);
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_cortdex_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexLocalClient(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CortdexLocalClient>>::decrement_strong_count(ptr as _);
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_cortdex_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexRemoteClient(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CortdexRemoteClient>>::increment_strong_count(ptr as _);
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_cortdex_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexRemoteClient(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CortdexRemoteClient>>::decrement_strong_count(ptr as _);
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_cortdex_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexServer(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CortdexServer>>::increment_strong_count(ptr as _);
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_cortdex_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexServer(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CortdexServer>>::decrement_strong_count(ptr as _);
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_cortdex_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerModelManager(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ModelManager>>::increment_strong_count(ptr as _);
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_cortdex_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerModelManager(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ModelManager>>::decrement_strong_count(ptr as _);
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_cortdex_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVaultManager(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<VaultManager>>::increment_strong_count(ptr as _);
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_cortdex_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVaultManager(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<VaultManager>>::decrement_strong_count(ptr as _);
    }
}
#[cfg(not(target_family = "wasm"))]
pub use io::*;

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
mod web {
    // This file is automatically generated, so please do not edit it.
    // @generated by `flutter_rust_bridge`@ 2.10.0.

    // Section: imports

    use super::*;
    use crate::api::error::*;
    use crate::api::IntoConcreteCortexCommand;
    use crate::api::*;
    use crate::inner::client::*;
    use crate::inner::command::*;
    use crate::inner::server::*;
    use cortdex_db::api::git::*;
    use cortdex_ml::manager::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::wasm_bindgen;
    use flutter_rust_bridge::for_generated::wasm_bindgen::prelude::*;
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};

    // Section: boilerplate

    flutter_rust_bridge::frb_generated_boilerplate_web!();

    #[wasm_bindgen]
    pub fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteCortdexCommand(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConcreteCortdexCommand>>::increment_strong_count(ptr as _);
    }

    #[wasm_bindgen]
    pub fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteCortdexCommand(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConcreteCortdexCommand>>::decrement_strong_count(ptr as _);
    }

    #[wasm_bindgen]
    pub fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexClient(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CortdexClient>>::increment_strong_count(ptr as _);
    }

    #[wasm_bindgen]
    pub fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexClient(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CortdexClient>>::decrement_strong_count(ptr as _);
    }

    #[wasm_bindgen]
    pub fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexError(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CortdexError>>::increment_strong_count(ptr as _);
    }

    #[wasm_bindgen]
    pub fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexError(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CortdexError>>::decrement_strong_count(ptr as _);
    }

    #[wasm_bindgen]
    pub fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexLocalClient(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CortdexLocalClient>>::increment_strong_count(ptr as _);
    }

    #[wasm_bindgen]
    pub fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexLocalClient(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CortdexLocalClient>>::decrement_strong_count(ptr as _);
    }

    #[wasm_bindgen]
    pub fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexRemoteClient(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CortdexRemoteClient>>::increment_strong_count(ptr as _);
    }

    #[wasm_bindgen]
    pub fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexRemoteClient(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CortdexRemoteClient>>::decrement_strong_count(ptr as _);
    }

    #[wasm_bindgen]
    pub fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexServer(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CortdexServer>>::increment_strong_count(ptr as _);
    }

    #[wasm_bindgen]
    pub fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCortdexServer(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CortdexServer>>::decrement_strong_count(ptr as _);
    }

    #[wasm_bindgen]
    pub fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerModelManager(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ModelManager>>::increment_strong_count(ptr as _);
    }

    #[wasm_bindgen]
    pub fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerModelManager(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ModelManager>>::decrement_strong_count(ptr as _);
    }

    #[wasm_bindgen]
    pub fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVaultManager(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<VaultManager>>::increment_strong_count(ptr as _);
    }

    #[wasm_bindgen]
    pub fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVaultManager(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<VaultManager>>::decrement_strong_count(ptr as _);
    }
}
#[cfg(target_family = "wasm")]
pub use web::*;
